// Netlify Function for sending email notifications
const nodemailer = require('nodemailer');

exports.handler = async (event, context) => {
  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const { to, subject, question, answer, timestamp } = JSON.parse(event.body);

    // Validate required fields
    if (!to || !question || !answer) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Missing required fields' })
      };
    }

    // Create email transporter (you'll need to set these environment variables)
    const transporter = nodemailer.createTransporter({
      service: 'gmail',
      auth: {
        user: process.env.GMAIL_USER, // Your Gmail address
        pass: process.env.GMAIL_APP_PASSWORD // Gmail app password
      }
    });

    // Create email content
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <style>
        body { font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; margin: 0; padding: 0; background: #0d0d0d; color: #ffffff; }
        .container { max-width: 600px; margin: 0 auto; padding: 40px 20px; }
        .header { text-align: center; margin-bottom: 40px; }
        .logo { font-size: 32px; font-weight: bold; background: linear-gradient(135deg, #8b5cf6, #06b6d4); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent; }
        .content { background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 20px; padding: 30px; margin: 20px 0; }
        .question { background: linear-gradient(135deg, rgba(139, 92, 246, 0.2), rgba(124, 58, 237, 0.2)); border: 1px solid rgba(139, 92, 246, 0.3); border-radius: 15px; padding: 20px; margin: 20px 0; }
        .answer { background: rgba(255, 255, 255, 0.03); border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 15px; padding: 20px; margin: 20px 0; }
        .footer { text-align: center; margin-top: 40px; color: rgba(255, 255, 255, 0.6); font-size: 14px; }
        .timestamp { color: rgba(255, 255, 255, 0.5); font-size: 12px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <div class="logo">ðŸ¤– Innobot Enterprise</div>
          <p style="color: rgba(255, 255, 255, 0.7); margin: 10px 0;">Your AI Response is Ready</p>
        </div>
        
        <div class="content">
          <h2 style="color: #8b5cf6; margin-top: 0;">Your Question:</h2>
          <div class="question">
            <p style="margin: 0; line-height: 1.6;">${question}</p>
          </div>
          
          <h2 style="color: #06b6d4; margin-bottom: 10px;">Innobot's Response:</h2>
          <div class="answer">
            <p style="margin: 0; line-height: 1.6; white-space: pre-wrap;">${answer}</p>
          </div>
          
          <div class="timestamp">
            <p>Generated on: ${new Date(timestamp).toLocaleString()}</p>
          </div>
        </div>
        
        <div class="footer">
          <p>This response was generated by Innobot Enterprise AI</p>
          <p>Visit <a href="https://innobotix.lovable.app/innobot" style="color: #8b5cf6;">Innobot</a> for more AI assistance</p>
        </div>
      </div>
    </body>
    </html>
    `;

    // Send email
    const mailOptions = {
      from: process.env.GMAIL_USER,
      to: to,
      subject: subject || 'Innobot Enterprise - Your AI Response',
      html: htmlContent,
      text: `Your Question: ${question}\n\nInnobot's Response: ${answer}\n\nGenerated on: ${new Date(timestamp).toLocaleString()}`
    };

    await transporter.sendMail(mailOptions);

    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST'
      },
      body: JSON.stringify({ 
        success: true, 
        message: 'Email sent successfully' 
      })
    };

  } catch (error) {
    console.error('Email sending error:', error);
    
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST'
      },
      body: JSON.stringify({ 
        success: false, 
        error: 'Failed to send email' 
      })
    };
  }
};